⚛️ 백준

	🪄 동적계획법2

	* 파일 합치기
		- python3으로는 못 푸는 문제
		- pypy3로 풀어야 한다
		- d[i][j] : i파일에서 j파일까지 합쳤을 때 필요한 최소 비용
		- d[i][j] = min(d[i][k] + d[k][j]) + dp[i][j-1] + f[i] (i <= k < j)

	* 행렬 곱셈 순서
		- pypy3, java11 로 풀이
		- d[i][j] = min(d[i][k] + d[k+1][j] + mat[i][0] * mat[k][1] * mat[j][1])

	* 양팔저울
		- 1차원 DP 문제
		- d[weight + j] = d[j - weight] = d[weight - j] = 1
		- 각 무게에 대해서 연쇄적으로 더해가면 안 됨(추 개수가 정해져 있기 때문) -> set 하나에 추가해서 한 번에 dp 갱신
		- weight : 현재 추 무게 (오름차순)
		- j : dp 인덱스
		- dp 배열은 sum(추 무게 리스트) + 1 만큼 설정했는데 문제에서는 dp 배열 크기 이상의 질의를 할 수 있음. -> bound를 넘는 입력은 무조건 N 반환하도록 예외처리.

	* 동전1
		- 1차원 DP 문제
		- 동전 개수가 무제한이므로 동전 가치에 대해서 dp를 연쇄적으로 갱신해야 함. 
		- d[n] += d[n - coin]
		- 예외처리 : 동전가치 > k 인 상황 (out of index exception)

	* 앱
		- 0/1 knapsack 문제 (2차원 DP)