⚛️ 백준

	🪄 동적계획법 (Dynamic Programming)

	* 피보나치 수1
		- 재귀호출 피보나치 구현
		- 동적계획 피보나치 구현
		- 재귀호출 부분 시간초과로 제출은 동적계획 코드로만 제출

	* 신나는 함수 실행
		- 3차원 DP 배열 생성
		- 문제 조건에 따라 배열 인덱스가 20 초과이거나 0 이하인 경우에 대해서 전처리하여 exception 해결

	* 01타일
		- 경우의수 셈하여 점화식 생성
		- 피보나치 수열과 유사한 수열
		- d[n] = d[n-2]에 00 붙인 거 + d[n-1]에 1 붙인거 

	* 파도반 수열
		- 문제에 주어진 수열에서 점화식 추출
		- p[n] = p[n-3] + p[n-2]

	* 연속합
		- 정수 수열이 주어졌을때 수열의 연속된 값을 더해서 얻을 수 있는 최대합을 구하는 문제
		- d[n] = max(num[n] + d[n-1], num[n])

	* RGB 거리
		- 문제 자체는 지도 색칠하기 문제랑 비슷한 거 같고, 문제 풀이는 knapsack 문제랑 비슷한 것 같음.
		- i 번째 집과 i-1 번째 집의 색깔이 같지 않도록 모든 집을 칠하는 최소 비용 구하는 문제
		- 2차원 dp 배열을 만듬
		- dp[i][j] : i 번째 집에서 j 색을 칠할 때의 최소비용
		- dp[i][j] = costs[i][j] + min(dp[i-1][j말고 나머지 다])