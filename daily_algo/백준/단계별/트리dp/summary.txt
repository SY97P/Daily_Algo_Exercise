⚛️ 백준

	🪄 트리에서의 동적계획법

	* 트리와 쿼리
		- 정점개수, root정점, 쿼리개수, 연결정보 주어진 상태에서 쿼리로 주어진 정점을 루트로 하는 서브트리의 정점수 출력하는 문제
		- BFS + DP
		- d[i] : 정점 i가 루트일 때 서브트리의 정점 수
		1. 연결정보 + root 정점 이용해서 1회 DFS
		2. 백트래킹과정에서 dp값 갱신
		3. 쿼리 인덱스에 해당하는 dp값 출력

	* 트리의 독립집합
	    - 트리탐색(DFS) + DP
	    - 2차원 DP
	        dp[i][0] : 정점 i가 독립집합 S에 포함하지 않을 때 최대 S 크기
	                 = sum(dp[자식노드][2])
	        dp[i][1] : 정점 i가 독립집합 S에 포함할 때 최대 S 크기
	                 = w[i] + sum(dp[자식노드][0])
	        dp[i][2] : max(dp[i][0], dp[i][1])
	    - 역추적
	        - maxValue - w[i] == sum(dp[자식노드][0]) -> 정점 i가 S에 포함
	        - maxValue - w[i] != sum(dp[자식노드][0]) -> 정점 i가 S에 미포함
	    - 예외상황
	        - 정점이 하나밖에 없을때 -> 그 하나라도 출력
	        - 맨 마지막 정점을 포함하거나 포함하지 않을 때 -> 역추적으로 해결

    * 사회망서비스(SNS)
        - DFS + DP
        - 2차원 DP 문제
            - dp[i][0] : 사람 i가 얼리가 아닐 때 서브트리에서 필요한 얼리 수
            - dp[i][1] : 사람 i가 얼리가 맞을 때 서브트리에서 필요한 얼리 수
        - 시간초과
            - 지역변수와 전역변수차이
            - 전역변수 : 힙에 저장. 참조 시 table lookup 필요 (key : value 쌍 탐색)
            - 지역변수 : 스택에 저장.
            -> 무엇보다 지역변수를 찾아보고 없으면 전역변수를 찾는 방식이라 가능하면 지역변수를 사용하는 편이 이득임.
            -> 지역변수 사용하는 방법
                - 함수 파라미터에 부담을 주는 방법, main 함수를 사용하는 방법은 비추인 것 같음.
                - 모듈 내부에서 단순 value 하나만을 갖는 변수가 아니라, list처럼 모듈 내에서 고르게 참조가 가능한 함수를 사용하는 것이 좋을 것 같음.
                -> 나는 앞으로 visited 사용할 때 메모리제한이 빡빡한 게 아니라면, boolean list로 문제풀이를 하는게 좋아보임.

    * 우수마을
        - DFS + DP
        - 2차원 DP 문제
            - dp[i][0] : 마을 i가 우수마을이 아닐 때 서브트리 중 최대 우수마을 주민수
                        = max(dp[자식])
            - dp[i][1] : 마을 i가 우수마을일 때 서브트리 중 최대 우수마을 주민수
                        = w[i] + sum(dp[자식][0])