"""
문제요약

- n 개의 정점, 단방향 간선 있는 그래프
- 해당 그래프와 무관한 정점 하나를 추가함
- [생성한 정점 번호, 도넛 수, 막대 수, 8자 수] 구하기
- 모양
    - 도넛 모양
        - 어디에서 시작해도 시작 정점으로 돌아옴
        - 시작 정점의 간선이 여러개라도 자신에게 돌아오는 경로는 하나뿐임
    - 막대 모양
        - 계속 이동하다 보면 더이상 이동 불가한 정점 있음
    - 8자 모양
        - 어디에서 시작해도 시작 정점까지 경로가 2개 있음
        - 시작정점 간선이 여러개라, 자신에게 돌아오는 경로가 두 개임
    - 추가 정점
        - 해당 정점으로 이동하는 간선 없음

제한사항

- 1 <= 간선 <= 1_000_000
- 간선 : [출발, 도착]
    - 1 <= 출발, 도착 <= 1_000_000
- 주어지는 그래프에는 반드시 두 개 이상의 그래프 형태 존재

해결전략

- 각 노드 별로 (out, in) 간선으로 정답 구하기
- 추가 정점
    - out 만 있고, in 은 없는 정점
- 도넛
    - 추가 정점의 out - (막대 수 + 8자 수)
- 막대
    - out 은 없고, in 만 있는 정점
- 8자
    - out 과 in 이 두 개 이상인 정점
"""


def solution(edges):
    answer = [0] * 4
    adj = {node: [0, 0] for edge in edges for node in edge}
    for s, e in edges:
        adj[s][0] += 1
        adj[e][1] += 1

    for k, v in adj.items():
        if v[0] >= 2 and v[1] == 0:
            answer[0] = k
        elif v[0] == 0 and v[1] > 0:
            answer[2] += 1
        elif v[0] >= 2 and v[1] >= 2:
            answer[3] += 1

    answer[1] = adj[answer[0]][0] - (answer[2] + answer[3])

    return answer


def main():
    # [2, 1, 1, 0]
    answer = solution([[2, 3], [4, 3], [1, 1], [2, 1]])
    print(answer)

    # [4, 0, 1, 2]
    answer = solution([[4, 11], [1, 12], [8, 3], [12, 7], [4, 2], [7, 11], [4, 8], [9, 6], [10, 11], [6, 10], [3, 5], [11, 1], [5, 3], [11, 9], [3, 8]])
    print(answer)


if __name__ == '__main__':
    main()
